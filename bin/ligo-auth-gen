#!/usr/bin/env python3

import os
import sys
import ldap
import tempfile
import argparse


def parse_opts():
    parser = argparse.ArgumentParser(description="Generate ligo authorization file")
    parser.add_argument("-u", "--url", dest="url", help="LDAP server URL", default="ldaps://ldap.ligo.org")
    parser.add_argument("-d", "--dn", dest="dn", help="User's DN to access LDAP server", default="uid=osg-services-brian-lin,ou=system,dc=ligo,dc=org")
    parser.add_argument("-p", "--password", dest="password", help="Password of the DN")
    parser.add_argument("-b", "--base", dest="base", action='append', help="LDAP server base tree", default=["ou=people,dc=ligo,dc=org", "ou=robot,dc=ligo,dc=org"])
    parser.add_argument("-g", "--group", dest="group", action='append', help="Authorized group name", default=["Communities:LSCVirgoLIGOGroupMembers", "Communities:robot:OSGRobotCert"])
    parser.add_argument("-w", "--whitelist", dest="whitelist", help="Whitelist filename")
    parser.add_argument("output_file", help='Output File')

    return parser.parse_args()


def main():
    opts = parse_opts()
    ldap_obj = ldap.initialize(opts.url)
    if len(opts.group) != len(opts.base):
        raise ValueError("Number of groups ({}) is not equal to number of base ({}) arguments".format(len(opts.group), len(opts.base)))
    try:
        ldap_obj.protocal_version = ldap.VERSION3
        ldap_obj.simple_bind_s(opts.dn, opts.password)
        valid = True
    except Exception as error:
        print(error)

    all_dns = []
    for i in range(len(opts.group)):
        print(("Querying {} and {}".format(opts.group[i], opts.base[i])))
        query = "(&(isMemberOf=%s)(gridX509subject=*))" % opts.group[i]
        results = ldap_obj.search_s(opts.base[i], ldap.SCOPE_SUBTREE, query, ["gridX509subject"])
        print(("Got {} results".format(len(results))))
        for result in results:
            user_dns = result[1].get('gridX509subject', [])
            all_dns += [i.decode('utf-8').replace("\n", " ") for i in user_dns if i.decode('utf-8').startswith("/")]

    if opts.whitelist:
        for entry in open(opts.whitelist):
            all_dns.append(entry.strip())

    if opts.output_file:
        dir, fname = os.path.split(opts.output_file)
        fd, name = tempfile.mkstemp(prefix=fname, dir=dir)
        #os.write(fd, b"x509%\n")
        os.write(fd, b"scitoken%\n")
        dns = "\n".join(all_dns)
        os.write(fd, dns.encode() + b"\n")
        os.close(fd)
        os.rename(name, opts.output_file)
    else:
        for dn in all_dns:
            print(dn)


if __name__ == '__main__':
    main()

